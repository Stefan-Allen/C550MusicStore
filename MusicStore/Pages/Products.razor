@page "/Products"

@using MusicStore.Data
@using System.Net
@using MusicStore.Schemas

@inject UserService UserService;
@inject NavigationManager NavManager;
@inject ProductService ProductService;
@inject ArtistService ArtistService;

<div class="topnav">
        <a class="active" href="/Home">Home</a>
        <a href="/Artists">Artists</a>
        <a href="/Basket">Basket</a>
        <a href="/Products">Products</a>
        <a href="/Profile">Profile</a>
        <a href="/Search">Search</a>
    <a href="/Checkout">Checkout</a>
    <a href="/Orders">Orders</a>
      </div>

<!-- Login Form -->

<body class="Body">
    <div>

        <div class="BackSquare">
            <div class="form">

                <div id="tableContainer-1" class="tableContainer-1">
                    <div class="LoginText">
                        BNUify
                    </div>

                    <div id="tableContainer-2" class="tableContainer-2">
                        <p>
                            @Message
                        </p>
                        <div method="post" class="login-form">
                            <p>
                                <input class="add" required="" type="text" placeholder="Name" @bind="Name" />
                                <input class="add" required="" type="text" placeholder="Genre" @bind="Genre" />
                                <input class="add" required="" type="text" placeholder="Price" @bind="Price" />
                                
                            </p>
                            <p class="Style">
                                <select class="dob1" name="gender" required="" asp-for="1" @bind="Artist">
                                    <option value=@string.Empty>Select artist</option>
                                    @foreach (ArtistSchema artist in ArtistService.GetArtists())
                                    {
                                        <option value=@artist.Name>@artist.Name</option>
                                    }
                                </select>
                            </p>
                            
                            <button class="btnbtnprimary" @onclick="OnAddProduct">
                                Add product
                                </button>
                                                            <p>
                                <input class="remove" required="" type="text" placeholder="Remove" @bind="RemovalName"/>
                            </p>
                            <button class="btnbtnprimary" @onclick="OnRemoveProduct">
                                Remove product
                            </button>
                            <a class="Home" href="/Home">Back home</a>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

@code {
    // Holds the Name of the new Product - Binded
    private string Name { get; set; } = string.Empty;
    // Holds the Genre of the new Product - Binded
    private string Genre { get; set; } = string.Empty;
    // Holds the Price of the new Product - Binded
    private string Price { get; set; } = string.Empty;
    // Holds the Artist Name of the New Product - Binded
    private string Artist { get; set; } = string.Empty;
    // Holds the Response Message
    private string Message { get; set; } = string.Empty;

    // Holds the Name of the Removal Product - Binded
    private string RemovalName { get; set; } = string.Empty;

    // Runs on page load
    protected override void OnInitialized()
    {
        // If user is null means user is not autheticated so returns to login page using Navigation Manager
        if (UserService.User == null)
        {
            NavManager.NavigateTo("Login");
            return;
        }
        
        // Runs the Default OnInitialized Function
        base.OnInitialized();
    }

    // Runs on Add Product Button
    private void OnAddProduct()
    {
        // Checks the Input Values and if any are null sets Message and returns
        if (string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Genre) || string.IsNullOrEmpty(Price) || string.IsNullOrEmpty(Artist))
        {

            Message = "Empty value found";
            return;
        }

        // Attempts to Parse the Price to a Double if fails sets Message and returns
        if (!double.TryParse(Price, out var parsed))
        {
            Message = "Invalid price";
            return;
        }

        // Runs the Add Product CRUD Function
        var response = ProductService.AddProduct(Artist, Name, Genre, string.Empty, parsed);

        // Checks the Response if conflict sets Message and returns
        if (response == HttpStatusCode.Conflict)
        {
            Message = "Product already exist";
            return;
        }
        
        // Sets success Message
        Message = "Product created successfully";
    }

    private void OnRemoveProduct()
    {
        // if removalname is not inputted set Message and return
        if (string.IsNullOrWhiteSpace(RemovalName))
        {
            Message = "Missing required input";
            return;
        }
        
        // Runs RemoveProduct CRUD Function
        var response = ProductService.RemoveProduct(RemovalName);

        // Checks response if NotFound sets message and returns
        if (response == HttpStatusCode.NotFound)
        {
            Message = "Product not found";
            return;
        }

        // Sets success message
        Message = "Removed Product Successfully";
    }
}