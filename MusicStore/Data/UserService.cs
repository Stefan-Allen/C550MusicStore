using System.Net;
using System.Security.Cryptography;
using System.Text;
using Microsoft.VisualBasic;
using MusicStore.Schemas;

namespace MusicStore.Data;

public class UserService
{
    // The Currently Logged in User
    public UserSchema? User;

    // CRUD Action Read, Used To Authenticate the User
    public async Task<HttpStatusCode> LoginAsync(string username, string password)
    {
        // New Database Instance
        var db = new Database();
        
        // Ensures that the database is created
        await db.Database.EnsureCreatedAsync();

        // Look for user with username provided
        var user = db.Users.FirstOrDefault(x => x.Username.ToLower().Trim() == username.ToLower().Trim());

        // Return not found status code if no user is found
        if (user == null)
        {
            return HttpStatusCode.NotFound;
        }
        // Verify Password using Hash and Salt, if not correct password return forbidden Http Status Code
        if (!VerifyPassword(password, user.Password, user.Salt))
        {
            return HttpStatusCode.Forbidden;
        }

        // Set the current user
        User = user;

        // Return Status code Accepted
        return HttpStatusCode.Accepted;
    }

    // CRUD Action Create, Used to Create Users
    public async Task<HttpStatusCode> RegisterAsync(string username, string password, string fullName, DateTime dob, string gender, string title)
    {
        // New Database Instance
        var db = new Database();
        
        // Ensures the Database is Created
        await db.Database.EnsureCreatedAsync();
        
        // If a User already has that username, return http status conflict
        if (db.Users.Any(x => x.Username.Trim().ToLower() == username.Trim().ToLower()))
        {
            return HttpStatusCode.Conflict;
        }
        
        // Hash the password for security reason, just incase a breach of the database was to occur the passwords would be protected
        var hashed = HashPasword(password, out var salt);

        // Create the User Object
        var user = new UserSchema
        {
            Created = DateTime.Now,
            Id = db.Users.Count() + 1,
            Dob = dob,
            Username = username.Trim(),
            FullName = fullName,
            Password = hashed,
            Salt = salt,
            Gender = gender
        };

        // Add User Object to Database
        db.Users.Add(user);

        // Save Changes To Database
        await db.SaveChangesAsync();

        // Respond Successfully Status Code
        return HttpStatusCode.Created;
    }
    
    // Used to Hash the passwords for security reasons so that neither staff nor anyone who breaches the database can see that passwords
    private string HashPasword(string password, out string salt)
    {
        // Gets the salt used to hash the password so that every password has a different salt meaning that even if one is cracked it can't be used on all of them
        salt = GetSalt();
        
        // Hashes the Password using a Pbkdf2 Hash Method with a SHA512 Algorithm
        var hash = Rfc2898DeriveBytes.Pbkdf2(
            Encoding.UTF8.GetBytes(password),
            Encoding.UTF8.GetBytes(salt),
            350000,
            HashAlgorithmName.SHA512,
            64);
        //Return Converted hashed password
        return Convert.ToHexString(hash);
    }
    
    // Used to verify the password on login
    private bool VerifyPassword(string password, string hash, string salt)
    {
        // Hashes the inputted password so it can be compared to the stored one
        var hashToCompare = Rfc2898DeriveBytes.Pbkdf2(Encoding.UTF8.GetBytes(password), Encoding.UTF8.GetBytes(salt), 350000, HashAlgorithmName.SHA512, 64);
        // Returns a bool if they match or not
        return hashToCompare.SequenceEqual(Convert.FromHexString(hash));
    }
    
    // Creates the salts for hashing the password
    private static string GetSalt()  
    {  
        // creates the memory space for the salt
        var bytes = new byte[128 / 8];
        // Random generates a set of numbers
        using var keyGenerator = RandomNumberGenerator.Create();
        // Puts the randomly generated bytes into the byte array
        keyGenerator.GetBytes(bytes); 
        // returns the converted string
        return BitConverter.ToString(bytes).Replace("-", "").ToLower();
    }

    // CRUD Action Read, Gets all the orders of the current user
    public List<OrderSchema> GetOrders()
    {
        // New Database Instance
        var db = new Database();

        // Ensures the database is created
        db.Database.EnsureCreated();

        // Checks to make sure there are orders for the user if not return empty list
        if (!db.Orders.Any() || !db.Orders.Any(p => p.UserId == this.User!.Id)) return new List<OrderSchema>();

        // returns all users orders
        return db.Orders.Where(o => o.UserId == this.User!.Id).ToList();
    }

}
